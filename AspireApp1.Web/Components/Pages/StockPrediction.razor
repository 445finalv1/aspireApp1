@page "/StockPrediction"
@using AspireApp1.Web.Models
@inject HttpClient Http

<h3>Stock Price Prediction</h3>

<EditForm Model="@_predictionRequest" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <!-- Company Name -->
    <div>
        <label>Company Name:</label>
        <InputText @bind-Value="_predictionRequest.CompanyName" />
    </div>

    <!-- Recent Stock Prices -->
    <div>
        <label>Recent Stock Prices (Last 10 Days):</label>
        @for (int i = 0; i < 10; i++)
        {
            <InputNumber @bind-Value="_predictionRequest.RecentStockPrices[i]" />
        }
    </div>

    <!-- Related Company Prices -->
    <div>
        <label>Related Company Prices (Previous Day):</label>
        @foreach (var company in _relatedCompanies)
        {
            <div>
                <label>@company:</label>
                <InputNumber @bind-Value="_predictionRequest.RelatedCompanyPrices[company]" />
            </div>
        }
    </div>

    <!-- Economic Indicators -->
    <div>
        <label>Economic Indicators (Last 2 Days):</label>
        @foreach (var indicator in _economicIndicators)
        {
            <div>
                <label>@indicator:</label>
                @for (int i = 0; i < 2; i++)
                {
                    <InputNumber @bind-Value="_predictionRequest.EconomicIndicators[indicator][i]" />
                }
            </div>
        }
    </div>

    <!-- Submit Button -->
    <button type="submit">Predict</button>
</EditForm>

@if (predictionResponse != null)
{
    <h4>Prediction Result:</h4>
    <p>Predicted Stock Price: @predictionResponse.PredictedPrice</p>
    <p>@predictionResponse.Message</p>
}

@code {
    private StockPredictionRequest _predictionRequest = new StockPredictionRequest
    {
        RecentStockPrices = new List<decimal>(new decimal[10]),
        RelatedCompanyPrices = new Dictionary<string, decimal>(),
        EconomicIndicators = new Dictionary<string, List<decimal>>()
    };
    private StockPredictionResponse? predictionResponse;

    // Predefined related companies and economic indicators
    private List<string> _relatedCompanies = new List<string> { "CompanyA", "CompanyB", "CompanyC", "CompanyD", "CompanyE" };
    private List<string> _economicIndicators = new List<string> { "GDPGrowthRate", "UnemploymentRate", "InflationRate", "InterestRate" };

    protected override void OnInitialized()
    {
        // Initialize dictionaries
        foreach (var company in _relatedCompanies)
        {
            _predictionRequest.RelatedCompanyPrices[company] = 0;
        }
        foreach (var indicator in _economicIndicators)
        {
            _predictionRequest.EconomicIndicators[indicator] = new List<decimal> { 0, 0 };
        }
    }

    private async Task HandleValidSubmit()
    {
        var response = await Http.PostAsJsonAsync("api/StockPrediction", _predictionRequest);
        if (response.IsSuccessStatusCode)
        {
            predictionResponse = await response.Content.ReadFromJsonAsync<StockPredictionResponse>();
        }
        else
        {
            // Handle error
            predictionResponse = new StockPredictionResponse
            {
                Message = "Error occurred while predicting stock price."
            };
        }
    }
}